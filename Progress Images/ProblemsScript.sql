INSERT INTO public."MyApp_problem" (name, description, sample_tc, custom_tc, hidden_tc, accepted, difficulty, frequency)
VALUES 
('Binary Search Tree', 'Implement a Binary Search Tree', 'input: [5, 3, 8, 2, 4, 7, 9], output: [2, 3, 4, 5, 7, 8, 9]', 'input: [10, 5, 15, 3, 7, 12, 17], output: [3, 5, 7, 10, 12, 15, 17]', 'input: [20, 10, 30, 5, 15, 25, 35], output: [5, 10, 15, 20, 25, 30, 35]', 70, 'Easy', 5),
('Merge Sort Algorithm', 'Write a function for Merge Sort', 'input: [38, 27, 43, 3, 9, 82, 10], output: [3, 9, 10, 27, 38, 43, 82]', 'input: [10, 7, 8, 9, 1, 5], output: [1, 5, 7, 8, 9, 10]', 'input: [3, 41, 52, 26, 38, 57, 9, 49], output: [3, 9, 26, 38, 41, 49, 52, 57]', 65, 'Medium', 7),
('Dijkstras Algorithm', 'Implement Dijkstras shortest path algorithm', 'input: Graph with edges [(0, 1, 4), (0, 2, 1), (2, 1, 2), (1, 3, 1)], start: 0, output: [0, 3, 1, 4]', 'input: Graph with edges [(0, 1, 10), (0, 3, 5), (1, 2, 1), (3, 1, 3), (3, 2, 9), (3, 4, 2)], start: 0, output: [0, 8, 9, 5, 7]', 'input: Graph with edges [(0, 1, 7), (0, 2, 9), (0, 5, 14), (1, 2, 10), (1, 3, 15), (2, 5, 2), (3, 4, 6), (4, 5, 9)], start: 0, output: [0, 7, 9, 22, 28, 11]', 50, 'Hard', 10),
('Linked List Cycle', 'Detect a cycle in a linked list', 'input: [3, 2, 0, -4], pos: 1, output: true', 'input: [1, 2], pos: 0, output: true', 'input: [1], pos: -1, output: false', 85, 'Medium', 6),
('Fibonacci Sequence', 'Generate the Fibonacci sequence up to n', 'input: 5, output: [0, 1, 1, 2, 3]', 'input: 8, output: [0, 1, 1, 2, 3, 5, 8, 13]', 'input: 10, output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]', 90, 'Easy', 8),
('Palindrome Check', 'Check if a string is a palindrome', 'input: "racecar", output: true', 'input: "hello", output: false', 'input: "A man a plan a canal Panama", output: true', 75, 'Easy', 12),
('Graph Traversal', 'Perform BFS and DFS on a graph', 'input: Graph with edges [(0, 1), (0, 2), (1, 2), (2, 0), (2, 3), (3, 3)], start: 2, BFS output: [2, 0, 3, 1], DFS output: [2, 0, 1, 3]', 'input: Graph with edges [(0, 1), (0, 2), (1, 2), (2, 0), (2, 3), (3, 3)], start: 0, BFS output: [0, 1, 2, 3], DFS output: [0, 1, 2, 3]', 'input: Graph with edges [(0, 1), (1, 2), (2, 3), (3, 4), (4, 0)], start: 0, BFS output: [0, 1, 2, 3, 4], DFS output: [0, 1, 2, 3, 4]', 80, 'Medium', 9),
('Knapsack Problem', 'Solve the 0/1 Knapsack problem', 'input: values = [60, 100, 120], weights = [10, 20, 30], W = 50, output: 220', 'input: values = [10, 40, 30, 50], weights = [5, 4, 6, 3], W = 10, output: 90', 'input: values = [24, 18, 18, 10], weights = [24, 10, 10, 7], W = 25, output: 36', 60, 'Hard', 11),
('Prime Numbers', 'Generate a list of prime numbers up to n', 'input: 10, output: [2, 3, 5, 7]', 'input: 20, output: [2, 3, 5, 7, 11, 13, 17, 19]', 'input: 30, output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]', 95, 'Easy', 15),
('Anagram Check', 'Check if two strings are anagrams', 'input: "listen", "silent", output: true', 'input: "hello", "billion", output: false', 'input: "triangle", "integral", output: true', 70, 'Easy', 14),
('Binary Search', 'Implement binary search on a sorted array', 'input: [1, 2, 3, 4, 5, 6, 7, 8, 9], target: 5, output: 4', 'input: [10, 20, 30, 40, 50, 60, 70, 80, 90], target: 60, output: 5', 'input: [11, 22, 33, 44, 55, 66, 77, 88, 99], target: 44, output: 3', 85, 'Easy', 18),
('Sorting Algorithms', 'Implement and compare different sorting algorithms', 'input: [5, 2, 9, 1, 5, 6], output: [1, 2, 5, 5, 6, 9]', 'input: [38, 27, 43, 3, 9, 82, 10], output: [3, 9, 10, 27, 38, 43, 82]', 'input: [1, 4, 2, 8, 5, 7], output: [1, 2, 4, 5, 7, 8]', 75, 'Medium', 10),
('Matrix Multiplication', 'Multiply two matrices', 'input: [[1, 2], [3, 4]], [[2, 0], [1, 2]], output: [[4, 4], [10, 8]]', 'input: [[2, 3], [4, 5]], [[6, 7], [8, 9]], output: [[36, 41], [64, 73]]', 'input: [[1, 2, 3], [4, 5, 6]], [[7, 8], [9, 10], [11, 12]], output: [[58, 64], [139, 154]]', 60, 'Hard', 9),
('String Reversal', 'Reverse a given string', 'input: "hello", output: "olleh"', 'input: "world", output: "dlrow"', 'input: "openai", output: "ianepo"', 90, 'Easy', 5),
('Find Duplicates', 'Find duplicate elements in an array', 'input: [1, 2, 3, 4, 5, 3, 2], output: [2, 3]', 'input: [6, 7, 8, 6, 7, 9], output: [6, 7]', 'input: [10, 20, 20, 30, 40, 40], output: [20, 40]', 85, 'Medium', 12),
('Longest Substring Without Repeating Characters', 'Find the length of the longest substring without repeating characters', 'input: "abcabcbb", output: 3', 'input: "bbbbb", output: 1', 'input: "pwwkew", output: 3', 75, 'Hard', 10),
('Tower of Hanoi', 'Solve the Tower of Hanoi problem', 'input: 3, source: A, target: C, auxiliary: B, output: "Move disk 1 from A to C. Move disk 2 from A to B. Move disk 1 from C to B. Move disk 3 from A to C. Move disk 1 from B to A. Move disk 2 from B to C. Move disk 1 from A to C."', 'input: 4, source: A, target: C, auxiliary: B, output: "Move disk 1 from A to B. Move disk 2 from A to C. Move disk 1 from B to C. Move disk 3 from A to B. Move disk 1 from C to A. Move disk 2 from C to B. Move disk 1 from A to B. Move disk 4 from A to C. Move disk 1 from B to C. Move disk 2 from B to A. Move disk 1 from C to A. Move disk 3 from B to C. Move disk 1 from A to B. Move disk 2 from A to C. Move disk 1 from B to C."', 'input: 5, source: A, target: C, auxiliary: B, output: "Move disk 1 from A to C. Move disk 2 from A to B. Move disk 1 from C to B. Move disk 3 from A to C. Move disk 1 from B to A. Move disk 2 from B to C. Move disk 1 from A to C. Move disk 4 from A to B. Move disk 1 from C to B. Move disk 2 from C to A. Move disk 1 from B to A. Move disk 3 from C to B. Move disk 1 from A to C. Move disk 2 from A to B. Move disk 1 from C to B. Move disk 5 from A to C. Move disk 1 from B to C. Move disk 2 from B to A. Move disk 1 from C to A. Move disk 3 from B to C. Move disk 1 from A to B. Move disk 2 from A to C. Move disk 1 from B to C. Move disk 4 from B to A. Move disk 1 from C to A. Move disk 2 from C to B. Move disk 1 from A to B. Move disk 3 from C to B. Move disk 1 from B to C. Move disk 2 from B to A. Move disk 1 from C to A. Move disk 4 from B to C. Move disk 1 from A to C. Move disk 2 from A to B. Move disk 1 from C to B. Move disk 3 from A to C. Move disk 1 from B to C. Move disk 2 from B to A. Move disk 1 from C to A. Move disk 4 from B to C. Move disk 1 from A to B. Move disk 2 from A to C. Move disk 1 from B to C."', 60, 'Hard', 8),
('Array Rotation', 'Rotate an array by k steps', 'input: [1, 2, 3, 4, 5, 6, 7], k: 3, output: [5, 6, 7, 1, 2, 3, 4]', 'input: [1, 2, 3, 4, 5, 6], k: 2, output: [5, 6, 1, 2, 3, 4]', 'input: [1, 2, 3, 4, 5], k: 4, output: [2, 3, 4, 5, 1]', 85, 'Medium', 9),
('Subarray Sum', 'Find the sum of all subarrays', 'input: [1, 2, 3], output: [1, 2, 3, 3, 5, 6]', 'input: [4, 5, 6], output: [4, 5, 6, 9, 11, 15]', 'input: [7, 8, 9], output: [7, 8, 9, 15, 17, 24]', 75, 'Easy', 7),
('Balanced Parentheses', 'Check if a string has balanced parentheses', 'input: "()[]{}", output: true', 'input: "([)]", output: false', 'input: "{[]}", output: true', 90, 'Easy', 8),
('Matrix Transpose', 'Transpose a given matrix', 'input: [[1, 2, 3], [4, 5, 6]], output: [[1, 4], [2, 5], [3, 6]]', 'input: [[7, 8], [9, 10]], output: [[7, 9], [8, 10]]', 'input: [[11, 12, 13], [14, 15, 16], [17, 18, 19]], output: [[11, 14, 17], [12, 15, 18], [13, 16, 19]]', 85, 'Medium', 9),
('Longest Common Subsequence', 'Find the longest common subsequence of two strings', 'input: "abcde", "ace", output: 3', 'input: "abc", "abc", output: 3', 'input: "abc", "def", output: 0', 60, 'Hard', 10),
('Subsequence Sum', 'Find if a subsequence with given sum exists', 'input: [1, 2, 3], sum: 5, output: true', 'input: [4, 5, 6], sum: 10, output: false', 'input: [7, 8, 9], sum: 16, output: true', 75, 'Medium', 8),
('Array Intersection', 'Find the intersection of two arrays', 'input: [1, 2, 2, 1], [2, 2], output: [2, 2]', 'input: [4, 9, 5], [9, 4, 9, 8, 4], output: [4, 9]', 'input: [7, 1, 5, 2, 3, 6], [3, 8, 6, 20, 7], output: [3, 6, 7]', 70, 'Easy', 6),
('Longest Increasing Subsequence', 'Find the length of the longest increasing subsequence', 'input: [10, 9, 2, 5, 3, 7, 101, 18], output: 4', 'input: [0, 1, 0, 3, 2, 3], output: 4', 'input: [7, 7, 7, 7, 7, 7, 7], output: 1', 65, 'Hard', 12),
('Subarray Product', 'Find the maximum product of a subarray', 'input: [2, 3, -2, 4], output: 6', 'input: [-2, 0, -1], output: 0', 'input: [0, 2], output: 2', 80, 'Medium', 9),
('Reverse Linked List', 'Reverse a singly linked list', 'input: [1, 2, 3, 4, 5], output: [5, 4, 3, 2, 1]', 'input: [1, 2], output: [2, 1]', 'input: [], output: []', 75, 'Easy', 10);

SELECT * FROM public."MyApp_problem"
ORDER BY id ASC 